let Bo,bo;const Io=new WeakMap,Eo=new WeakMap,ko=new WeakMap,jo=new WeakMap,No=new WeakMap;let Wo={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return Eo.get(e);if("objectStoreNames"===t)return e.objectStoreNames||ko.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return Ao(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function Ao(e){if(e instanceof IDBRequest)return function(e){const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("success",o),e.removeEventListener("error",s)},o=()=>{t(Ao(e.result)),r()},s=()=>{n(e.error),r()};e.addEventListener("success",o),e.addEventListener("error",s)});return t.then(t=>{t instanceof IDBCursor&&Io.set(t,e)}).catch(()=>{}),No.set(t,e),t}(e);if(jo.has(e))return jo.get(e);const t=function(e){return"function"==typeof e?function(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(bo||(bo=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(Oo(this),t),Ao(Io.get(this))}:function(...t){return Ao(e.apply(Oo(this),t))}:function(t,...n){const r=e.call(Oo(this),t,...n);return ko.set(r,t.sort?t.sort():[t]),Ao(r)}}(e):(e instanceof IDBTransaction&&function(e){if(Eo.has(e))return;const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("complete",o),e.removeEventListener("error",s),e.removeEventListener("abort",s)},o=()=>{t(),r()},s=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",o),e.addEventListener("error",s),e.addEventListener("abort",s)});Eo.set(e,t)}(e),t=e,(Bo||(Bo=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some(e=>t instanceof e)?new Proxy(e,Wo):e);var t}(e);return t!==e&&(jo.set(e,t),No.set(t,e)),t}const Oo=e=>No.get(e);function Po(e,t,{blocked:n,upgrade:r,blocking:o,terminated:s}={}){const a=indexedDB.open(e,t),i=Ao(a);return r&&a.addEventListener("upgradeneeded",e=>{r(Ao(a.result),e.oldVersion,e.newVersion,Ao(a.transaction))}),n&&a.addEventListener("blocked",()=>n()),i.then(e=>{s&&e.addEventListener("close",()=>s()),o&&e.addEventListener("versionchange",()=>o())}).catch(()=>{}),i}function _o(e,{blocked:t}={}){const n=indexedDB.deleteDatabase(e);return t&&n.addEventListener("blocked",()=>t()),Ao(n).then(()=>{})}const Ko=["get","getKey","getAll","getAllKeys","count"],Vo=["put","add","delete","clear"],qo=new Map;function zo(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(qo.get(t))return qo.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,o=Vo.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!o&&!Ko.includes(n))return;const s=async function(e,...t){const s=this.transaction(e,o?"readwrite":"readonly");let a=s.store;r&&(a=a.index(t.shift()));const i=await a[n](...t);return o&&await s.done,i};return qo.set(t,s),s}var nt;nt=Wo,Wo={...nt,get:(e,t,n)=>zo(e,t)||nt.get(e,t,n),has:(e,t)=>!!zo(e,t)||nt.has(e,t)};var Ro=Object.freeze({__proto__:null,deleteDB:_o,openDB:Po,unwrap:Oo,wrap:Ao});export default Ro;export{_o as deleteDB,Ro as idb,Po as openDB,Oo as unwrap,Ao as wrap};