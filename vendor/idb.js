let so,ao;const io=new WeakMap,co=new WeakMap,po=new WeakMap,fo=new WeakMap,lo=new WeakMap;let Do={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return co.get(e);if("objectStoreNames"===t)return e.objectStoreNames||po.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return Bo(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function vo(e){return"function"==typeof e?function(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(ao||(ao=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(bo(this),t),Bo(io.get(this))}:function(...t){return Bo(e.apply(bo(this),t))}:function(t,...n){const r=e.call(bo(this),t,...n);return po.set(r,t.sort?t.sort():[t]),Bo(r)}}(e):(e instanceof IDBTransaction&&function(e){if(co.has(e))return;const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("complete",o),e.removeEventListener("error",s),e.removeEventListener("abort",s)},o=()=>{t(),r()},s=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",o),e.addEventListener("error",s),e.addEventListener("abort",s)});co.set(e,t)}(e),t=e,(so||(so=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some(e=>t instanceof e)?new Proxy(e,Do):e);var t}function Bo(e){if(e instanceof IDBRequest)return function(e){const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("success",o),e.removeEventListener("error",s)},o=()=>{t(Bo(e.result)),r()},s=()=>{n(e.error),r()};e.addEventListener("success",o),e.addEventListener("error",s)});return t.then(t=>{t instanceof IDBCursor&&io.set(t,e)}).catch(()=>{}),lo.set(t,e),t}(e);if(fo.has(e))return fo.get(e);const t=vo(e);return t!==e&&(fo.set(e,t),lo.set(t,e)),t}const bo=e=>lo.get(e);function Io(e,t,{blocked:n,upgrade:r,blocking:o,terminated:s}={}){const a=indexedDB.open(e,t),i=Bo(a);return r&&a.addEventListener("upgradeneeded",e=>{r(Bo(a.result),e.oldVersion,e.newVersion,Bo(a.transaction))}),n&&a.addEventListener("blocked",()=>n()),i.then(e=>{s&&e.addEventListener("close",()=>s()),o&&e.addEventListener("versionchange",()=>o())}).catch(()=>{}),i}function go(e,{blocked:t}={}){const n=indexedDB.deleteDatabase(e);return t&&n.addEventListener("blocked",()=>t()),Bo(n).then(()=>{})}const mo=["get","getKey","getAll","getAllKeys","count"],wo=["put","add","delete","clear"],Eo=new Map;function ho(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(Eo.get(t))return Eo.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,o=wo.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!o&&!mo.includes(n))return;const s=async function(e,...t){const s=this.transaction(e,o?"readwrite":"readonly");let a=s.store;r&&(a=a.index(t.shift()));const i=await a[n](...t);return o&&await s.done,i};return Eo.set(t,s),s}var re;re=Do,Do={...re,get:(e,t,n)=>ho(e,t)||re.get(e,t,n),has:(e,t)=>!!ho(e,t)||re.has(e,t)};var yo=Object.freeze({__proto__:null,deleteDB:go,openDB:Io,unwrap:bo,wrap:Bo});export default yo;export{go as deleteDB,yo as idb,Io as openDB,bo as unwrap,Bo as wrap};