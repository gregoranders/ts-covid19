const isLocalhost = Boolean(window.location.hostname === 'localhost' ||
    window.location.hostname === '[::1]' ||
    window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));
const registerValidSW = (swUrl) => {
    navigator.serviceWorker
        .register(swUrl, { scope: '/' })
        .then((registration) => {
        registration.onupdatefound = () => {
            const installingWorker = registration.installing;
            if (installingWorker) {
                installingWorker.onstatechange = () => {
                    if (installingWorker.state === 'installed') {
                        if (navigator.serviceWorker.controller) {
                            console.log('New content is available; please refresh.');
                        }
                        else if (navigator.serviceWorker.controller) {
                            console.log('Content is cached for offline use.');
                        }
                    }
                    else if (installingWorker.state === 'activated') {
                        installingWorker.postMessage({ type: 'CLIENTS_CLAIM' });
                    }
                };
            }
        };
    })
        .catch((error) => {
        console.error('Error during service worker registration:', error);
    });
};
const checkValidServiceWorker = (swUrl) => {
    fetch(swUrl)
        .then((response) => {
        if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {
            navigator.serviceWorker.ready.then((registration) => {
                registration.unregister().then(() => {
                    window.location.reload();
                });
            });
        }
        else {
            registerValidSW(swUrl);
        }
    })
        .catch(() => {
        console.log('No internet connection found. App is running in offline mode.');
    });
};
export const registerServiceWorker = () => {
    if (navigator.serviceWorker) {
        const publicUrl = new URL(window.location.toString());
        if (publicUrl.origin !== window.location.origin) {
            return;
        }
        const swUrl = `serviceWorker.js`;
        if (!isLocalhost) {
            registerValidSW(swUrl);
        }
        else {
            checkValidServiceWorker(swUrl);
        }
    }
    else {
        console.error(`Missing navigator.serviceWorker`);
    }
};
export const unregister = () => {
    if (navigator.serviceWorker) {
        navigator.serviceWorker.ready.then((registration) => {
            registration.unregister();
        });
    }
};
export default registerServiceWorker;
//# sourceMappingURL=data:application/json;base64,