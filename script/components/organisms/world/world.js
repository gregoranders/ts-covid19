import React, { useState } from 'react';
import { LineChart, XAxis, Tooltip, CartesianGrid, Line, YAxis, Legend, ResponsiveContainer } from 'recharts';
import { ModelProcessorPropTypes } from 'model';
import { Select, MenuItem, FormGroup, FormControlLabel, Switch, useTheme, Box, Card, CardHeader, CardContent, Typography, Grid, } from '@material-ui/core';
export const World = ({ processor }) => {
    const theme = useTheme();
    const [state, setState] = useState({
        field: 'confirmed',
        label: 'Confirmed',
        color: theme.palette.error.main,
    });
    const [scale, setScale] = useState('log');
    if (!processor.model.length) {
        return React.createElement("h1", null, "Loading");
    }
    const aggregated = processor.aggregated;
    const before = aggregated[aggregated.length - 2];
    const latest = aggregated[aggregated.length - 1];
    const { confirmed, deaths, recovered } = latest;
    const activeBefore = before.confirmed - before.deaths - before.recovered;
    const active = confirmed - deaths - recovered;
    const confirmedDiff = latest.confirmed - before.confirmed;
    const deathsDiff = latest.deaths - before.deaths;
    const recoveredDiff = latest.recovered - before.recovered;
    const activeDiff = active - activeBefore;
    const deathsRatio = processor.ratio(deaths, confirmed);
    const recoveredRatio = processor.ratio(recovered, confirmed);
    const activeRatio = processor.ratio(active, confirmed);
    return (React.createElement(Box, null,
        React.createElement(Grid, { container: true, direction: "row", justify: "space-evenly", alignItems: "center" },
            React.createElement(Card, null,
                React.createElement(CardHeader, { title: "Confirmed", subheader: confirmed.toLocaleString() }),
                React.createElement(CardContent, null,
                    React.createElement(Typography, { variant: "body2", color: "textSecondary", component: "p" },
                        "+ ",
                        confirmedDiff.toLocaleString()))),
            React.createElement(Card, null,
                React.createElement(CardHeader, { title: "Deaths", subheader: deaths.toLocaleString() }),
                React.createElement(CardContent, null,
                    React.createElement(Typography, { variant: "body2", color: "textSecondary", component: "p" },
                        "+ ",
                        deathsDiff.toLocaleString(),
                        " [",
                        deathsRatio.toFixed(2),
                        "%]"))),
            React.createElement(Card, null,
                React.createElement(CardHeader, { title: "Recovered", subheader: recovered.toLocaleString() }),
                React.createElement(CardContent, null,
                    React.createElement(Typography, { variant: "body2", color: "textSecondary", component: "p" },
                        "+ ",
                        recoveredDiff.toLocaleString(),
                        " [",
                        recoveredRatio.toFixed(2),
                        "%]"))),
            React.createElement(Card, null,
                React.createElement(CardHeader, { title: "Active", subheader: active.toLocaleString() }),
                React.createElement(CardContent, null,
                    React.createElement(Typography, { variant: "body2", color: "textSecondary", component: "p" },
                        "+ ",
                        activeDiff.toLocaleString(),
                        " [",
                        activeRatio.toFixed(2),
                        "%]")))),
        React.createElement(FormGroup, null,
            React.createElement(FormControlLabel, { control: React.createElement(Switch, { size: "small", checked: scale === 'log' ? true : false, onChange: () => {
                        switch (scale) {
                            default:
                            case 'log':
                                setScale('linear');
                                break;
                            case 'linear':
                                setScale('log');
                                break;
                        }
                    } }), label: scale === 'log' ? 'Logarithmic' : 'Linear' })),
        React.createElement(ResponsiveContainer, { width: "100%", aspect: 720 / 450 },
            React.createElement(LineChart, { data: aggregated, margin: {
                    top: 5,
                    right: 30,
                    left: 20,
                    bottom: 5,
                } },
                React.createElement(CartesianGrid, { strokeDasharray: "3 3" }),
                React.createElement(XAxis, { dataKey: "timestamp", scale: "utcTime", tickFormatter: (value) => {
                        return processor.utc(new Date(value));
                    } }),
                React.createElement(YAxis, { scale: scale, domain: ['auto', (dataMax) => dataMax * 2], tickFormatter: (value) => {
                        return parseInt(value).toLocaleString();
                    } }),
                React.createElement(Tooltip, { labelFormatter: (value) => {
                        return processor.utc(new Date(value));
                    }, formatter: (value) => {
                        return parseInt(value).toLocaleString();
                    } }),
                React.createElement(Legend, { verticalAlign: "top", height: 36 }),
                React.createElement(Line, { name: state.label, type: "monotone", dataKey: state.field, stroke: state.color, dot: false }))),
        React.createElement(FormGroup, null,
            React.createElement(Select, { value: state.field, onChange: (event) => {
                    switch (event.target.value) {
                        case 'deaths':
                            setState({
                                color: theme.palette.error.main,
                                field: 'deaths',
                                label: 'Deaths',
                            });
                            break;
                        case 'recovered':
                            setState({
                                color: theme.palette.success.main,
                                field: 'recovered',
                                label: 'Recovered',
                            });
                            break;
                        default:
                        case 'confirmed':
                            setState({
                                color: theme.palette.warning.main,
                                field: 'confirmed',
                                label: 'Confirmed',
                            });
                            break;
                    }
                } },
                React.createElement(MenuItem, { value: "confirmed" }, "Confirmed"),
                React.createElement(MenuItem, { value: "deaths" }, "Deaths"),
                React.createElement(MenuItem, { value: "recovered" }, "Recovered")))));
};
World.displayName = 'World';
World.propTypes = {
    processor: ModelProcessorPropTypes,
};
export default World;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ybGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvc2NyaXB0L2NvbXBvbmVudHMvb3JnYW5pc21zL3dvcmxkL3dvcmxkLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxFQUFxQixRQUFRLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDM0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUM5RyxPQUFPLEVBQWtCLHVCQUF1QixFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRWhFLE9BQU8sRUFDTCxNQUFNLEVBQ04sUUFBUSxFQUNSLFNBQVMsRUFDVCxnQkFBZ0IsRUFDaEIsTUFBTSxFQUNOLFFBQVEsRUFDUixHQUFHLEVBQ0gsSUFBSSxFQUNKLFVBQVUsRUFDVixXQUFXLEVBQ1gsVUFBVSxFQUNWLElBQUksR0FDTCxNQUFNLG1CQUFtQixDQUFDO0FBYzNCLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBa0MsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUU7SUFDcEUsTUFBTSxLQUFLLEdBQUcsUUFBUSxFQUFFLENBQUM7SUFDekIsTUFBTSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxRQUFRLENBQUM7UUFDakMsS0FBSyxFQUFFLFdBQVc7UUFDbEIsS0FBSyxFQUFFLFdBQVc7UUFDbEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUk7S0FDbkIsQ0FBQyxDQUFDO0lBRWhCLE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEdBQUcsUUFBUSxDQUFZLEtBQUssQ0FBQyxDQUFDO0lBRXJELElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtRQUMzQixPQUFPLDBDQUFnQixDQUFDO0tBQ3pCO0lBYUQsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQztJQUV4QyxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqRCxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqRCxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxNQUFNLENBQUM7SUFDaEQsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDekUsTUFBTSxNQUFNLEdBQUcsU0FBUyxHQUFHLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFFOUMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO0lBQzFELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNqRCxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDMUQsTUFBTSxVQUFVLEdBQUcsTUFBTSxHQUFHLFlBQVksQ0FBQztJQUV6QyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN2RCxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM3RCxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztJQVN2RCxPQUFPLENBQ0wsb0JBQUMsR0FBRztRQUNGLG9CQUFDLElBQUksSUFBQyxTQUFTLFFBQUMsU0FBUyxFQUFDLEtBQUssRUFBQyxPQUFPLEVBQUMsY0FBYyxFQUFDLFVBQVUsRUFBQyxRQUFRO1lBQ3hFLG9CQUFDLElBQUk7Z0JBQ0gsb0JBQUMsVUFBVSxJQUFDLEtBQUssRUFBQyxXQUFXLEVBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxjQUFjLEVBQUUsR0FBSTtnQkFDdkUsb0JBQUMsV0FBVztvQkFDVixvQkFBQyxVQUFVLElBQUMsT0FBTyxFQUFDLE9BQU8sRUFBQyxLQUFLLEVBQUMsZUFBZSxFQUFDLFNBQVMsRUFBQyxHQUFHOzt3QkFDMUQsYUFBYSxDQUFDLGNBQWMsRUFBRSxDQUN0QixDQUNELENBQ1Q7WUFDUCxvQkFBQyxJQUFJO2dCQUNILG9CQUFDLFVBQVUsSUFBQyxLQUFLLEVBQUMsUUFBUSxFQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsY0FBYyxFQUFFLEdBQUk7Z0JBQ2pFLG9CQUFDLFdBQVc7b0JBQ1Ysb0JBQUMsVUFBVSxJQUFDLE9BQU8sRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLGVBQWUsRUFBQyxTQUFTLEVBQUMsR0FBRzs7d0JBQzFELFVBQVUsQ0FBQyxjQUFjLEVBQUU7O3dCQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDOzZCQUM3QyxDQUNELENBQ1Q7WUFDUCxvQkFBQyxJQUFJO2dCQUNILG9CQUFDLFVBQVUsSUFBQyxLQUFLLEVBQUMsV0FBVyxFQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsY0FBYyxFQUFFLEdBQUk7Z0JBQ3ZFLG9CQUFDLFdBQVc7b0JBQ1Ysb0JBQUMsVUFBVSxJQUFDLE9BQU8sRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLGVBQWUsRUFBQyxTQUFTLEVBQUMsR0FBRzs7d0JBQzFELGFBQWEsQ0FBQyxjQUFjLEVBQUU7O3dCQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDOzZCQUNuRCxDQUNELENBQ1Q7WUFDUCxvQkFBQyxJQUFJO2dCQUNILG9CQUFDLFVBQVUsSUFBQyxLQUFLLEVBQUMsUUFBUSxFQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsY0FBYyxFQUFFLEdBQUk7Z0JBQ2pFLG9CQUFDLFdBQVc7b0JBQ1Ysb0JBQUMsVUFBVSxJQUFDLE9BQU8sRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLGVBQWUsRUFBQyxTQUFTLEVBQUMsR0FBRzs7d0JBQzFELFVBQVUsQ0FBQyxjQUFjLEVBQUU7O3dCQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDOzZCQUM3QyxDQUNELENBQ1QsQ0FDRjtRQUNQLG9CQUFDLFNBQVM7WUFDUixvQkFBQyxnQkFBZ0IsSUFDZixPQUFPLEVBQ0wsb0JBQUMsTUFBTSxJQUNMLElBQUksRUFBQyxPQUFPLEVBQ1osT0FBTyxFQUFFLEtBQUssS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUN2QyxRQUFRLEVBQUUsR0FBRyxFQUFFO3dCQUNiLFFBQVEsS0FBSyxFQUFFOzRCQUNiLFFBQVE7NEJBQ1IsS0FBSyxLQUFLO2dDQUNSLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQ0FDbkIsTUFBTTs0QkFDUixLQUFLLFFBQVE7Z0NBQ1gsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dDQUNoQixNQUFNO3lCQUNUO29CQUNILENBQUMsR0FDRCxFQUVKLEtBQUssRUFBRSxLQUFLLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FDakQsQ0FDUTtRQUVaLG9CQUFDLG1CQUFtQixJQUFDLEtBQUssRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxHQUFHO1lBQ2pELG9CQUFDLFNBQVMsSUFDUixJQUFJLEVBQUUsVUFBVSxFQUNoQixNQUFNLEVBQUU7b0JBQ04sR0FBRyxFQUFFLENBQUM7b0JBQ04sS0FBSyxFQUFFLEVBQUU7b0JBQ1QsSUFBSSxFQUFFLEVBQUU7b0JBQ1IsTUFBTSxFQUFFLENBQUM7aUJBQ1Y7Z0JBRUQsb0JBQUMsYUFBYSxJQUFDLGVBQWUsRUFBQyxLQUFLLEdBQUc7Z0JBQ3ZDLG9CQUFDLEtBQUssSUFDSixPQUFPLEVBQUMsV0FBVyxFQUNuQixLQUFLLEVBQUMsU0FBUyxFQUNmLGFBQWEsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO3dCQUN2QixPQUFPLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDeEMsQ0FBQyxHQUNEO2dCQUNGLG9CQUFDLEtBQUssSUFDSixLQUFLLEVBQUUsS0FBSyxFQUNaLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUMxQyxhQUFhLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTt3QkFDdkIsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7b0JBQzFDLENBQUMsR0FDRDtnQkFDRixvQkFBQyxPQUFPLElBQ04sY0FBYyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7d0JBQ3hCLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFlLENBQUMsQ0FBQyxDQUFDO29CQUNsRCxDQUFDLEVBQ0QsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7d0JBQ25CLE9BQU8sUUFBUSxDQUFDLEtBQWUsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO29CQUNwRCxDQUFDLEdBQ0Q7Z0JBQ0Ysb0JBQUMsTUFBTSxJQUFDLGFBQWEsRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFFLEVBQUUsR0FBSTtnQkFFMUMsb0JBQUMsSUFBSSxJQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksRUFBQyxVQUFVLEVBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssR0FBSSxDQUd4RixDQUNRO1FBRXRCLG9CQUFDLFNBQVM7WUFDUixvQkFBQyxNQUFNLElBQ0wsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQ2xCLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUNsQixRQUFRLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO3dCQUMxQixLQUFLLFFBQVE7NEJBQ1gsUUFBUSxDQUFDO2dDQUNQLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJO2dDQUMvQixLQUFLLEVBQUUsUUFBUTtnQ0FDZixLQUFLLEVBQUUsUUFBUTs2QkFDaEIsQ0FBQyxDQUFDOzRCQUNILE1BQU07d0JBQ1IsS0FBSyxXQUFXOzRCQUNkLFFBQVEsQ0FBQztnQ0FDUCxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSTtnQ0FDakMsS0FBSyxFQUFFLFdBQVc7Z0NBQ2xCLEtBQUssRUFBRSxXQUFXOzZCQUNuQixDQUFDLENBQUM7NEJBQ0gsTUFBTTt3QkFDUixRQUFRO3dCQUNSLEtBQUssV0FBVzs0QkFDZCxRQUFRLENBQUM7Z0NBQ1AsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUk7Z0NBQ2pDLEtBQUssRUFBRSxXQUFXO2dDQUNsQixLQUFLLEVBQUUsV0FBVzs2QkFDbkIsQ0FBQyxDQUFDOzRCQUNILE1BQU07cUJBQ1Q7Z0JBQ0gsQ0FBQztnQkFFRCxvQkFBQyxRQUFRLElBQUMsS0FBSyxFQUFDLFdBQVcsZ0JBQXFCO2dCQUNoRCxvQkFBQyxRQUFRLElBQUMsS0FBSyxFQUFDLFFBQVEsYUFBa0I7Z0JBQzFDLG9CQUFDLFFBQVEsSUFBQyxLQUFLLEVBQUMsV0FBVyxnQkFBcUIsQ0FDekMsQ0FDQyxDQUNSLENBQ1AsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLEtBQUssQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO0FBRTVCLEtBQUssQ0FBQyxTQUFTLEdBQUc7SUFDaEIsU0FBUyxFQUFFLHVCQUF1QjtDQUNuQyxDQUFDO0FBRUYsZUFBZSxLQUFLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgRnVuY3Rpb25Db21wb25lbnQsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluZUNoYXJ0LCBYQXhpcywgVG9vbHRpcCwgQ2FydGVzaWFuR3JpZCwgTGluZSwgWUF4aXMsIExlZ2VuZCwgUmVzcG9uc2l2ZUNvbnRhaW5lciB9IGZyb20gJ3JlY2hhcnRzJztcbmltcG9ydCB7IE1vZGVsUHJvY2Vzc29yLCBNb2RlbFByb2Nlc3NvclByb3BUeXBlcyB9IGZyb20gJ21vZGVsJztcblxuaW1wb3J0IHtcbiAgU2VsZWN0LFxuICBNZW51SXRlbSxcbiAgRm9ybUdyb3VwLFxuICBGb3JtQ29udHJvbExhYmVsLFxuICBTd2l0Y2gsXG4gIHVzZVRoZW1lLFxuICBCb3gsXG4gIENhcmQsXG4gIENhcmRIZWFkZXIsXG4gIENhcmRDb250ZW50LFxuICBUeXBvZ3JhcGh5LFxuICBHcmlkLFxufSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSc7XG5cbnR5cGUgV29ybGRQcm9wcyA9IHtcbiAgcHJvY2Vzc29yOiBNb2RlbFByb2Nlc3Nvcjtcbn07XG5cbnR5cGUgU3RhdGVUeXBlID0ge1xuICBmaWVsZDogJ2NvbmZpcm1lZCcgfCAnZGVhdGhzJyB8ICdyZWNvdmVyZWQnO1xuICBsYWJlbDogc3RyaW5nO1xuICBjb2xvcjogc3RyaW5nO1xufTtcblxudHlwZSBTY2FsZVR5cGUgPSAnbG9nJyB8ICdsaW5lYXInO1xuXG5leHBvcnQgY29uc3QgV29ybGQ6IEZ1bmN0aW9uQ29tcG9uZW50PFdvcmxkUHJvcHM+ID0gKHsgcHJvY2Vzc29yIH0pID0+IHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHtcbiAgICBmaWVsZDogJ2NvbmZpcm1lZCcsXG4gICAgbGFiZWw6ICdDb25maXJtZWQnLFxuICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW4sXG4gIH0gYXMgU3RhdGVUeXBlKTtcblxuICBjb25zdCBbc2NhbGUsIHNldFNjYWxlXSA9IHVzZVN0YXRlPFNjYWxlVHlwZT4oJ2xvZycpO1xuXG4gIGlmICghcHJvY2Vzc29yLm1vZGVsLmxlbmd0aCkge1xuICAgIHJldHVybiA8aDE+TG9hZGluZzwvaDE+O1xuICB9XG5cbiAgLy8gY29uc3Qgd29ybGQgPSBwcm9jZXNzb3IubW9kZWwucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PiB7XG4gIC8vICAgcmV0dXJuIHtcbiAgLy8gICAgIGNvdW50cnk6ICdXb3JsZCcsXG4gIC8vICAgICBzdGF0ZTogJycsXG4gIC8vICAgICBsYXQ6IDAsXG4gIC8vICAgICBsb246IDAsXG4gIC8vICAgICBwb3B1bGF0aW9uOiBwcmV2LnBvcHVsYXRpb24gKyBjdXJyZW50LnBvcHVsYXRpb24sXG4gIC8vICAgICB2YWx1ZXM6IFtdLFxuICAvLyAgIH07XG4gIC8vIH0pO1xuXG4gIGNvbnN0IGFnZ3JlZ2F0ZWQgPSBwcm9jZXNzb3IuYWdncmVnYXRlZDtcblxuICBjb25zdCBiZWZvcmUgPSBhZ2dyZWdhdGVkW2FnZ3JlZ2F0ZWQubGVuZ3RoIC0gMl07XG4gIGNvbnN0IGxhdGVzdCA9IGFnZ3JlZ2F0ZWRbYWdncmVnYXRlZC5sZW5ndGggLSAxXTtcbiAgY29uc3QgeyBjb25maXJtZWQsIGRlYXRocywgcmVjb3ZlcmVkIH0gPSBsYXRlc3Q7XG4gIGNvbnN0IGFjdGl2ZUJlZm9yZSA9IGJlZm9yZS5jb25maXJtZWQgLSBiZWZvcmUuZGVhdGhzIC0gYmVmb3JlLnJlY292ZXJlZDtcbiAgY29uc3QgYWN0aXZlID0gY29uZmlybWVkIC0gZGVhdGhzIC0gcmVjb3ZlcmVkO1xuXG4gIGNvbnN0IGNvbmZpcm1lZERpZmYgPSBsYXRlc3QuY29uZmlybWVkIC0gYmVmb3JlLmNvbmZpcm1lZDtcbiAgY29uc3QgZGVhdGhzRGlmZiA9IGxhdGVzdC5kZWF0aHMgLSBiZWZvcmUuZGVhdGhzO1xuICBjb25zdCByZWNvdmVyZWREaWZmID0gbGF0ZXN0LnJlY292ZXJlZCAtIGJlZm9yZS5yZWNvdmVyZWQ7XG4gIGNvbnN0IGFjdGl2ZURpZmYgPSBhY3RpdmUgLSBhY3RpdmVCZWZvcmU7XG5cbiAgY29uc3QgZGVhdGhzUmF0aW8gPSBwcm9jZXNzb3IucmF0aW8oZGVhdGhzLCBjb25maXJtZWQpO1xuICBjb25zdCByZWNvdmVyZWRSYXRpbyA9IHByb2Nlc3Nvci5yYXRpbyhyZWNvdmVyZWQsIGNvbmZpcm1lZCk7XG4gIGNvbnN0IGFjdGl2ZVJhdGlvID0gcHJvY2Vzc29yLnJhdGlvKGFjdGl2ZSwgY29uZmlybWVkKTtcblxuICAvLyBjb25zdCBjb25maXJtZWRSYXRpb0FsbCA9IHByb2Nlc3Nvci5yYXRpbyhjb25maXJtZWQsIHdvcmxkLnBvcHVsYXRpb24pO1xuICAvLyBjb25zdCBkZWF0aHNSYXRpb0FsbCA9IHByb2Nlc3Nvci5yYXRpbyhkZWF0aHMsIHdvcmxkLnBvcHVsYXRpb24pO1xuICAvLyBjb25zdCByZWNvdmVyZWRSYXRpb0FsbCA9IHByb2Nlc3Nvci5yYXRpbyhyZWNvdmVyZWQsIHdvcmxkLnBvcHVsYXRpb24pO1xuICAvLyBjb25zdCBhY3RpdmVSYXRpb0FsbCA9IHByb2Nlc3Nvci5yYXRpbyhhY3RpdmUsIHdvcmxkLnBvcHVsYXRpb24pO1xuXG4gIC8vIGNvbnN0IGxhdGVzdERhdGUgPSBuZXcgRGF0ZShsYXRlc3QudGltZXN0YW1wKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3g+XG4gICAgICA8R3JpZCBjb250YWluZXIgZGlyZWN0aW9uPVwicm93XCIganVzdGlmeT1cInNwYWNlLWV2ZW5seVwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgPENhcmQ+XG4gICAgICAgICAgPENhcmRIZWFkZXIgdGl0bGU9XCJDb25maXJtZWRcIiBzdWJoZWFkZXI9e2NvbmZpcm1lZC50b0xvY2FsZVN0cmluZygpfSAvPlxuICAgICAgICAgIDxDYXJkQ29udGVudD5cbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dFNlY29uZGFyeVwiIGNvbXBvbmVudD1cInBcIj5cbiAgICAgICAgICAgICAgKyB7Y29uZmlybWVkRGlmZi50b0xvY2FsZVN0cmluZygpfVxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgIDwvQ2FyZD5cbiAgICAgICAgPENhcmQ+XG4gICAgICAgICAgPENhcmRIZWFkZXIgdGl0bGU9XCJEZWF0aHNcIiBzdWJoZWFkZXI9e2RlYXRocy50b0xvY2FsZVN0cmluZygpfSAvPlxuICAgICAgICAgIDxDYXJkQ29udGVudD5cbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dFNlY29uZGFyeVwiIGNvbXBvbmVudD1cInBcIj5cbiAgICAgICAgICAgICAgKyB7ZGVhdGhzRGlmZi50b0xvY2FsZVN0cmluZygpfSBbe2RlYXRoc1JhdGlvLnRvRml4ZWQoMil9JV1cbiAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgICA8L0NhcmQ+XG4gICAgICAgIDxDYXJkPlxuICAgICAgICAgIDxDYXJkSGVhZGVyIHRpdGxlPVwiUmVjb3ZlcmVkXCIgc3ViaGVhZGVyPXtyZWNvdmVyZWQudG9Mb2NhbGVTdHJpbmcoKX0gLz5cbiAgICAgICAgICA8Q2FyZENvbnRlbnQ+XG4gICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiYm9keTJcIiBjb2xvcj1cInRleHRTZWNvbmRhcnlcIiBjb21wb25lbnQ9XCJwXCI+XG4gICAgICAgICAgICAgICsge3JlY292ZXJlZERpZmYudG9Mb2NhbGVTdHJpbmcoKX0gW3tyZWNvdmVyZWRSYXRpby50b0ZpeGVkKDIpfSVdXG4gICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgPC9DYXJkPlxuICAgICAgICA8Q2FyZD5cbiAgICAgICAgICA8Q2FyZEhlYWRlciB0aXRsZT1cIkFjdGl2ZVwiIHN1YmhlYWRlcj17YWN0aXZlLnRvTG9jYWxlU3RyaW5nKCl9IC8+XG4gICAgICAgICAgPENhcmRDb250ZW50PlxuICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImJvZHkyXCIgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCIgY29tcG9uZW50PVwicFwiPlxuICAgICAgICAgICAgICArIHthY3RpdmVEaWZmLnRvTG9jYWxlU3RyaW5nKCl9IFt7YWN0aXZlUmF0aW8udG9GaXhlZCgyKX0lXVxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgIDwvQ2FyZD5cbiAgICAgIDwvR3JpZD5cbiAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgIDxGb3JtQ29udHJvbExhYmVsXG4gICAgICAgICAgY29udHJvbD17XG4gICAgICAgICAgICA8U3dpdGNoXG4gICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgICAgIGNoZWNrZWQ9e3NjYWxlID09PSAnbG9nJyA/IHRydWUgOiBmYWxzZX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eygpID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgY2FzZSAnbG9nJzpcbiAgICAgICAgICAgICAgICAgICAgc2V0U2NhbGUoJ2xpbmVhcicpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmVhcic6XG4gICAgICAgICAgICAgICAgICAgIHNldFNjYWxlKCdsb2cnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICB9XG4gICAgICAgICAgbGFiZWw9e3NjYWxlID09PSAnbG9nJyA/ICdMb2dhcml0aG1pYycgOiAnTGluZWFyJ31cbiAgICAgICAgLz5cbiAgICAgIDwvRm9ybUdyb3VwPlxuXG4gICAgICA8UmVzcG9uc2l2ZUNvbnRhaW5lciB3aWR0aD1cIjEwMCVcIiBhc3BlY3Q9ezcyMCAvIDQ1MH0+XG4gICAgICAgIDxMaW5lQ2hhcnRcbiAgICAgICAgICBkYXRhPXthZ2dyZWdhdGVkfVxuICAgICAgICAgIG1hcmdpbj17e1xuICAgICAgICAgICAgdG9wOiA1LFxuICAgICAgICAgICAgcmlnaHQ6IDMwLFxuICAgICAgICAgICAgbGVmdDogMjAsXG4gICAgICAgICAgICBib3R0b206IDUsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxDYXJ0ZXNpYW5HcmlkIHN0cm9rZURhc2hhcnJheT1cIjMgM1wiIC8+XG4gICAgICAgICAgPFhBeGlzXG4gICAgICAgICAgICBkYXRhS2V5PVwidGltZXN0YW1wXCJcbiAgICAgICAgICAgIHNjYWxlPVwidXRjVGltZVwiXG4gICAgICAgICAgICB0aWNrRm9ybWF0dGVyPXsodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3Nvci51dGMobmV3IERhdGUodmFsdWUpKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8WUF4aXNcbiAgICAgICAgICAgIHNjYWxlPXtzY2FsZX1cbiAgICAgICAgICAgIGRvbWFpbj17WydhdXRvJywgKGRhdGFNYXgpID0+IGRhdGFNYXggKiAyXX1cbiAgICAgICAgICAgIHRpY2tGb3JtYXR0ZXI9eyh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUpLnRvTG9jYWxlU3RyaW5nKCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFRvb2x0aXBcbiAgICAgICAgICAgIGxhYmVsRm9ybWF0dGVyPXsodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3Nvci51dGMobmV3IERhdGUodmFsdWUgYXMgbnVtYmVyKSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgZm9ybWF0dGVyPXsodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlIGFzIHN0cmluZykudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8TGVnZW5kIHZlcnRpY2FsQWxpZ249XCJ0b3BcIiBoZWlnaHQ9ezM2fSAvPlxuXG4gICAgICAgICAgPExpbmUgbmFtZT17c3RhdGUubGFiZWx9IHR5cGU9XCJtb25vdG9uZVwiIGRhdGFLZXk9e3N0YXRlLmZpZWxkfSBzdHJva2U9e3N0YXRlLmNvbG9yfSBkb3Q9e2ZhbHNlfSAvPlxuICAgICAgICAgIHsvKiA8TGluZSBuYW1lPVwiRGVhdGhzXCIgdHlwZT1cIm1vbm90b25lXCIgZGF0YUtleT1cImRlYXRoc1wiIHN0cm9rZT1cIiM4MDAwMDBcIiBkb3Q9e2ZhbHNlfSAvPlxuICAgICAgICAgIDxMaW5lIG5hbWU9XCJSZWNvdmVyZWRcIiB0eXBlPVwibW9ub3RvbmVcIiBkYXRhS2V5PVwicmVjb3ZlcmVkXCIgc3Ryb2tlPVwiIzAwODAwMFwiIGRvdD17ZmFsc2V9IC8+ICovfVxuICAgICAgICA8L0xpbmVDaGFydD5cbiAgICAgIDwvUmVzcG9uc2l2ZUNvbnRhaW5lcj5cblxuICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgPFNlbGVjdFxuICAgICAgICAgIHZhbHVlPXtzdGF0ZS5maWVsZH1cbiAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LnRhcmdldC52YWx1ZSkge1xuICAgICAgICAgICAgICBjYXNlICdkZWF0aHMnOlxuICAgICAgICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW4sXG4gICAgICAgICAgICAgICAgICBmaWVsZDogJ2RlYXRocycsXG4gICAgICAgICAgICAgICAgICBsYWJlbDogJ0RlYXRocycsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ3JlY292ZXJlZCc6XG4gICAgICAgICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc3VjY2Vzcy5tYWluLFxuICAgICAgICAgICAgICAgICAgZmllbGQ6ICdyZWNvdmVyZWQnLFxuICAgICAgICAgICAgICAgICAgbGFiZWw6ICdSZWNvdmVyZWQnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBjYXNlICdjb25maXJtZWQnOlxuICAgICAgICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLndhcm5pbmcubWFpbixcbiAgICAgICAgICAgICAgICAgIGZpZWxkOiAnY29uZmlybWVkJyxcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQ29uZmlybWVkJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPE1lbnVJdGVtIHZhbHVlPVwiY29uZmlybWVkXCI+Q29uZmlybWVkPC9NZW51SXRlbT5cbiAgICAgICAgICA8TWVudUl0ZW0gdmFsdWU9XCJkZWF0aHNcIj5EZWF0aHM8L01lbnVJdGVtPlxuICAgICAgICAgIDxNZW51SXRlbSB2YWx1ZT1cInJlY292ZXJlZFwiPlJlY292ZXJlZDwvTWVudUl0ZW0+XG4gICAgICAgIDwvU2VsZWN0PlxuICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuXG5Xb3JsZC5kaXNwbGF5TmFtZSA9ICdXb3JsZCc7XG5cbldvcmxkLnByb3BUeXBlcyA9IHtcbiAgcHJvY2Vzc29yOiBNb2RlbFByb2Nlc3NvclByb3BUeXBlcyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFdvcmxkO1xuIl19