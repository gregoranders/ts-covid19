import React,{useState}from"react";import{LineChart,XAxis,Tooltip,CartesianGrid,Line,YAxis,Legend,ResponsiveContainer}from"recharts";import{ModelProcessorPropTypes}from"model";import{Select,MenuItem,FormGroup,FormControlLabel,Switch,useTheme,Box,Card,CardHeader,CardContent,Typography,Grid}from"@material-ui/core";export const World=({processor})=>{const theme=useTheme(),[state,setState]=useState({field:"confirmed",label:"Confirmed",color:theme.palette.error.main}),[scale,setScale]=useState("log");if(!processor.model.length)return React.createElement("h1",null,"Loading");const aggregated=processor.aggregated,before=aggregated[aggregated.length-2],latest=aggregated[aggregated.length-1],{confirmed,deaths,recovered}=latest,activeBefore=before.confirmed-before.deaths-before.recovered,active=confirmed-deaths-recovered,confirmedDiff=latest.confirmed-before.confirmed,deathsDiff=latest.deaths-before.deaths,recoveredDiff=latest.recovered-before.recovered,activeDiff=active-activeBefore,deathsRatio=processor.ratio(deaths,confirmed),recoveredRatio=processor.ratio(recovered,confirmed),activeRatio=processor.ratio(active,confirmed);return React.createElement(Box,null,React.createElement(Grid,{container:!0,direction:"row",justify:"space-evenly",alignItems:"center"},React.createElement(Card,null,React.createElement(CardHeader,{title:"Confirmed",subheader:confirmed.toLocaleString()}),React.createElement(CardContent,null,React.createElement(Typography,{variant:"body2",color:"textSecondary",component:"p"},"+ ",confirmedDiff.toLocaleString()))),React.createElement(Card,null,React.createElement(CardHeader,{title:"Deaths",subheader:deaths.toLocaleString()}),React.createElement(CardContent,null,React.createElement(Typography,{variant:"body2",color:"textSecondary",component:"p"},"+ ",deathsDiff.toLocaleString()," [",deathsRatio.toFixed(2),"%]"))),React.createElement(Card,null,React.createElement(CardHeader,{title:"Recovered",subheader:recovered.toLocaleString()}),React.createElement(CardContent,null,React.createElement(Typography,{variant:"body2",color:"textSecondary",component:"p"},"+ ",recoveredDiff.toLocaleString()," [",recoveredRatio.toFixed(2),"%]"))),React.createElement(Card,null,React.createElement(CardHeader,{title:"Active",subheader:active.toLocaleString()}),React.createElement(CardContent,null,React.createElement(Typography,{variant:"body2",color:"textSecondary",component:"p"},"+ ",activeDiff.toLocaleString()," [",activeRatio.toFixed(2),"%]")))),React.createElement(FormGroup,null,React.createElement(FormControlLabel,{control:React.createElement(Switch,{size:"small",checked:"log"===scale,onChange:()=>{switch(scale){default:case"log":setScale("linear");break;case"linear":setScale("log")}}}),label:"log"===scale?"Logarithmic":"Linear"})),React.createElement(ResponsiveContainer,{width:"100%",aspect:1.6},React.createElement(LineChart,{data:aggregated,margin:{top:5,right:30,left:20,bottom:5}},React.createElement(CartesianGrid,{strokeDasharray:"3 3"}),React.createElement(XAxis,{dataKey:"timestamp",scale:"utcTime",tickFormatter:value=>processor.utc(new Date(value))}),React.createElement(YAxis,{scale,domain:["auto",dataMax=>2*dataMax],tickFormatter:value=>parseInt(value).toLocaleString()}),React.createElement(Tooltip,{labelFormatter:value=>processor.utc(new Date(value)),formatter:value=>parseInt(value).toLocaleString()}),React.createElement(Legend,{verticalAlign:"top",height:36}),React.createElement(Line,{name:state.label,type:"monotone",dataKey:state.field,stroke:state.color,dot:!1}))),React.createElement(FormGroup,null,React.createElement(Select,{value:state.field,onChange:event=>{switch(event.target.value){case"deaths":setState({color:theme.palette.error.main,field:"deaths",label:"Deaths"});break;case"recovered":setState({color:theme.palette.success.main,field:"recovered",label:"Recovered"});break;default:case"confirmed":setState({color:theme.palette.warning.main,field:"confirmed",label:"Confirmed"})}}},React.createElement(MenuItem,{value:"confirmed"},"Confirmed"),React.createElement(MenuItem,{value:"deaths"},"Deaths"),React.createElement(MenuItem,{value:"recovered"},"Recovered"))))};World.displayName="World",World.propTypes={processor:ModelProcessorPropTypes};export default World;