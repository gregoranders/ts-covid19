import React,{useState}from"react";import{LineChart,XAxis,Tooltip,CartesianGrid,Line,YAxis,Legend,ResponsiveContainer}from"recharts";import{ModelProcessorPropTypes}from"model";import{Select,MenuItem,FormGroup,FormControlLabel,Switch}from"@material-ui/core";export const World=({processor})=>{const[state,setState]=useState({field:"confirmed",label:"Confirmed",color:"#008000"}),[scale,setScale]=useState("log");if(!processor.model.length)return React.createElement("h1",null,"Loading");const world=processor.model.reduce((prev,current)=>({country:"World",state:"",lat:0,lon:0,population:prev.population+current.population,values:[]})),aggregated=processor.aggregated,before=aggregated[aggregated.length-2],latest=aggregated[aggregated.length-1],{confirmed,deaths,recovered}=latest,activeBefore=before.confirmed-before.deaths-before.recovered,active=confirmed-deaths-recovered,confirmedDiff=latest.confirmed-before.confirmed,deathsDiff=latest.deaths-before.deaths,recoveredDiff=latest.recovered-before.recovered,activeDiff=active-activeBefore,deathsRatio=processor.ratio(deaths,confirmed),recoveredRatio=processor.ratio(recovered,confirmed),activeRatio=processor.ratio(active,confirmed),confirmedRatioAll=processor.ratio(confirmed,world.population),deathsRatioAll=processor.ratio(deaths,world.population),recoveredRatioAll=processor.ratio(recovered,world.population),activeRatioAll=processor.ratio(active,world.population);return React.createElement("div",{className:"world"},React.createElement("div",null,React.createElement("div",null,React.createElement("dl",null,React.createElement("dt",null,"Confirmed"),React.createElement("dd",null,confirmed.toLocaleString()," (",confirmedDiff.toLocaleString(),") [",confirmedRatioAll.toFixed(2),"%]")),React.createElement("dl",null,React.createElement("dt",null,"Deaths"),React.createElement("dd",null,deaths.toLocaleString()," (",deathsDiff.toLocaleString(),") ",deathsRatio.toFixed(2),"% [",deathsRatioAll.toFixed(2),"%]")),React.createElement("dl",null,React.createElement("dt",null,"Recovered"),React.createElement("dd",null,recovered.toLocaleString()," (",recoveredDiff.toLocaleString(),") ",recoveredRatio.toFixed(2),"% [",recoveredRatioAll.toFixed(2),"%]")),React.createElement("dl",null,React.createElement("dt",null,"Active"),React.createElement("dd",null,active.toLocaleString()," (",activeDiff.toLocaleString(),") ",activeRatio.toFixed(2),"% [",activeRatioAll.toFixed(2),"%]")))),React.createElement(FormGroup,null,React.createElement(FormControlLabel,{control:React.createElement(Select,{value:state.field,onChange:event=>{switch(event.target.value){case"deaths":setState({color:"#800000",field:"deaths",label:"Deaths"});break;case"recovered":setState({color:"#000080",field:"recovered",label:"Recovered"});break;default:case"confirmed":setState({color:"#008000",field:"confirmed",label:"Confirmed"})}}},React.createElement(MenuItem,{value:"confirmed"},"Confirmed"),React.createElement(MenuItem,{value:"deaths"},"Deaths"),React.createElement(MenuItem,{value:"recovered"},"Recovered")),label:"Type"})),React.createElement(FormGroup,null,React.createElement(FormControlLabel,{control:React.createElement(Switch,{size:"small",checked:"log"===scale,onChange:()=>{switch(scale){default:case"log":setScale("linear");break;case"linear":setScale("log")}}}),label:"log"===scale?"Logarithmic":"Linear"})),React.createElement(ResponsiveContainer,{width:"100%",aspect:1.6},React.createElement(LineChart,{data:aggregated,margin:{top:5,right:30,left:20,bottom:5}},React.createElement(CartesianGrid,{strokeDasharray:"3 3"}),React.createElement(XAxis,{dataKey:"timestamp",scale:"utcTime",tickFormatter:value=>processor.utc(new Date(value))}),React.createElement(YAxis,{scale,domain:["auto",dataMax=>2*dataMax],tickFormatter:value=>parseInt(value).toLocaleString()}),React.createElement(Tooltip,{labelFormatter:value=>processor.utc(new Date(value)),formatter:value=>parseInt(value).toLocaleString()}),React.createElement(Legend,{verticalAlign:"top",height:36}),React.createElement(Line,{name:state.label,type:"monotone",dataKey:state.field,stroke:state.color,dot:!1}))))};World.displayName="World",World.propTypes={processor:ModelProcessorPropTypes};export default World;