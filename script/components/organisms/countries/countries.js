import React from 'react';
import PropTypes from 'prop-types';
import clsx from 'clsx';
import { createStyles, lighten, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, TableSortLabel, Toolbar, Typography, Checkbox, IconButton, Tooltip, } from '@material-ui/core';
import { ModelProcessorPropTypes } from 'model';
import { Delete as DeleteIcon, FilterList as FilterListIcon } from '@material-ui/icons';
const useStyles = makeStyles((theme) => createStyles({
    root: {
        width: '100%',
    },
    paper: {
        width: '100%',
        marginBottom: theme.spacing(2),
    },
    table: {
        minWidth: 750,
    },
    visuallyHidden: {
        border: 0,
        clip: 'rect(0 0 0 0)',
        height: 1,
        margin: -1,
        overflow: 'hidden',
        padding: 0,
        position: 'absolute',
        top: 20,
        width: 1,
    },
}));
function descendingComparator(a, b, orderBy) {
    if (b[orderBy] < a[orderBy]) {
        return -1;
    }
    if (b[orderBy] > a[orderBy]) {
        return 1;
    }
    return 0;
}
function getComparator(order, orderBy) {
    return order === 'desc'
        ? (a, b) => descendingComparator(a, b, orderBy)
        : (a, b) => -descendingComparator(a, b, orderBy);
}
function stableSort(array, comparator) {
    const stabilizedThis = array.map((el, index) => [el, index]);
    stabilizedThis.sort((a, b) => {
        const order = comparator(a[0], b[0]);
        if (order !== 0)
            return order;
        return a[1] - b[1];
    });
    return stabilizedThis.map((el) => el[0]);
}
const headCells = [
    { id: 'name', numeric: false, disablePadding: true, label: 'Country/Region' },
    { id: 'confirmed', numeric: true, disablePadding: true, label: 'Confirmed' },
    { id: 'deaths', numeric: true, disablePadding: false, label: 'Deaths' },
    { id: 'recovered', numeric: true, disablePadding: false, label: 'Recovered' },
];
function EnhancedTableHead(props) {
    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;
    const createSortHandler = (property) => (event) => {
        onRequestSort(event, property);
    };
    return (React.createElement(TableHead, null,
        React.createElement(TableRow, null,
            React.createElement(TableCell, { padding: "checkbox" },
                React.createElement(Checkbox, { indeterminate: numSelected > 0 && numSelected < rowCount, checked: rowCount > 0 && numSelected === rowCount, onChange: onSelectAllClick, inputProps: { 'aria-label': 'select all desserts' } })),
            headCells.map((headCell) => (React.createElement(TableCell, { key: headCell.id, align: headCell.numeric ? 'right' : 'left', padding: headCell.disablePadding ? 'none' : 'default', sortDirection: orderBy === headCell.id ? order : false },
                React.createElement(TableSortLabel, { active: orderBy === headCell.id, direction: orderBy === headCell.id ? order : 'asc', onClick: createSortHandler(headCell.id) },
                    headCell.label,
                    orderBy === headCell.id ? (React.createElement("span", { className: classes.visuallyHidden }, order === 'desc' ? 'sorted descending' : 'sorted ascending')) : null)))))));
}
const useToolbarStyles = makeStyles((theme) => createStyles({
    root: {
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(1),
    },
    highlight: theme.palette.type === 'light'
        ? {
            color: theme.palette.secondary.main,
            backgroundColor: lighten(theme.palette.secondary.light, 0.85),
        }
        : {
            color: theme.palette.text.primary,
            backgroundColor: theme.palette.secondary.dark,
        },
    title: {
        flex: '1 1 100%',
    },
}));
const EnhancedTableToolbar = (props) => {
    const classes = useToolbarStyles();
    const { numSelected } = props;
    const date = props.processor.latestUpdateDate;
    const dateLabel = date ? props.processor.utc(new Date(date)) : '';
    return (React.createElement(Toolbar, { className: clsx(classes.root, {
            [classes.highlight]: numSelected > 0,
        }) },
        numSelected > 0 ? (React.createElement(Typography, { className: classes.title, color: "inherit", variant: "subtitle1", component: "div" },
            numSelected,
            " selected")) : (React.createElement(Typography, { className: classes.title, variant: "h6", id: "tableTitle", component: "div" }, dateLabel)),
        numSelected > 0 ? (React.createElement(Tooltip, { title: "Delete" },
            React.createElement(IconButton, { "aria-label": "delete" },
                React.createElement(DeleteIcon, null)))) : (React.createElement(Tooltip, { title: "Filter list" },
            React.createElement(IconButton, { "aria-label": "filter list" },
                React.createElement(FilterListIcon, null))))));
};
export const Countries = ({ processor, densePadding }) => {
    const rowsPerPageRange = [10, 20, 30];
    const classes = useStyles();
    const [order, setOrder] = React.useState('desc');
    const [orderBy, setOrderBy] = React.useState('confirmed');
    const [selected, setSelected] = React.useState([]);
    const [page, setPage] = React.useState(0);
    const [rowsPerPage, setRowsPerPage] = React.useState(rowsPerPageRange[0]);
    const rows = processor.model.map((model) => {
        return { ...model.values[model.values.length - 1], name: processor.name(model) };
    });
    const handleRequestSort = (event, property) => {
        const isAsc = orderBy === property && order === 'asc';
        setOrder(isAsc ? 'desc' : 'asc');
        setOrderBy(property);
    };
    const handleSelectAllClick = (event) => {
        if (event.target.checked) {
            const newSelecteds = rows.map((n) => n.name);
            setSelected(newSelecteds);
            return;
        }
        setSelected([]);
    };
    const handleClick = (event, name) => {
        const selectedIndex = selected.indexOf(name);
        let newSelected = [];
        if (selectedIndex === -1) {
            newSelected = newSelected.concat(selected, name);
        }
        else if (selectedIndex === 0) {
            newSelected = newSelected.concat(selected.slice(1));
        }
        else if (selectedIndex === selected.length - 1) {
            newSelected = newSelected.concat(selected.slice(0, -1));
        }
        else if (selectedIndex > 0) {
            newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));
        }
        setSelected(newSelected);
    };
    const handleChangePage = (event, newPage) => {
        setPage(newPage);
    };
    const handleChangeRowsPerPage = (event) => {
        setRowsPerPage(parseInt(event.target.value, 10));
        setPage(0);
    };
    const isSelected = (name) => selected.indexOf(name) !== -1;
    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);
    return (React.createElement("div", { className: classes.root },
        React.createElement(EnhancedTableToolbar, { numSelected: selected.length, processor: processor }),
        React.createElement(TableContainer, null,
            React.createElement(Table, { className: classes.table, "aria-labelledby": "tableTitle", size: densePadding ? 'small' : 'medium', "aria-label": "enhanced table" },
                React.createElement(EnhancedTableHead, { classes: classes, numSelected: selected.length, order: order, orderBy: orderBy, onSelectAllClick: handleSelectAllClick, onRequestSort: handleRequestSort, rowCount: rows.length }),
                React.createElement(TableBody, null,
                    stableSort(rows, getComparator(order, orderBy))
                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                        .map((row, index) => {
                        const isItemSelected = isSelected(row.name);
                        const labelId = `enhanced-table-checkbox-${index}`;
                        return (React.createElement(TableRow, { hover: true, onClick: (event) => handleClick(event, row.name), role: "checkbox", "aria-checked": isItemSelected, tabIndex: -1, key: row.name, selected: isItemSelected },
                            React.createElement(TableCell, { padding: "checkbox" },
                                React.createElement(Checkbox, { checked: isItemSelected, inputProps: { 'aria-labelledby': labelId } })),
                            React.createElement(TableCell, { component: "th", id: labelId, scope: "row", padding: "none" }, row.name),
                            React.createElement(TableCell, { align: "right" }, row.confirmed.toLocaleString()),
                            React.createElement(TableCell, { align: "right" }, row.deaths.toLocaleString()),
                            React.createElement(TableCell, { align: "right" }, row.recovered.toLocaleString())));
                    }),
                    emptyRows > 0 && (React.createElement(TableRow, { style: { height: (densePadding ? 33 : 53) * emptyRows } },
                        React.createElement(TableCell, { colSpan: 5 })))))),
        React.createElement(TablePagination, { rowsPerPageOptions: rowsPerPageRange, component: "div", count: rows.length, rowsPerPage: rowsPerPage, page: page, onChangePage: handleChangePage, onChangeRowsPerPage: handleChangeRowsPerPage })));
};
Countries.displayName = 'Countries';
Countries.propTypes = {
    processor: ModelProcessorPropTypes,
    densePadding: PropTypes.bool.isRequired,
};
export default Countries;
//# sourceMappingURL=data:application/json;base64,