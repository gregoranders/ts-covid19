import React, { useContext } from 'react';
import { useHistory } from 'react-router-dom';
import PropTypes from 'prop-types';
import { Container, makeStyles, useTheme, useMediaQuery, AppBar, Toolbar, colors, Fab, Typography, IconButton, CircularProgress, Badge, Paper, LinearProgress, } from '@material-ui/core';
import { Sync as SyncIcon, SyncDisabled as SyncDisabledIcon, Public as WorldIcon, Settings as SettingsIcon, } from '@material-ui/icons';
import clsx from 'clsx';
import { Context } from 'context';
const useStyles = makeStyles((theme) => ({
    root: {
        height: '100%',
        [theme.breakpoints.up('sm')]: {
            paddingTop: 0,
        },
    },
    shiftContent: {
        margin: '0 auto',
    },
    appBar: {
        top: 'auto',
        bottom: 0,
    },
    content: {
        height: '100%',
    },
    title: {
        display: 'none',
        [theme.breakpoints.up('sm')]: {
            display: 'block',
        },
    },
    grow: {
        flexGrow: 1,
    },
    progress: {
        width: '100%',
        '& > * + *': {
            marginTop: theme.spacing(2),
        },
    },
    fabButton: {
        position: 'absolute',
        zIndex: 1,
        top: -30,
        left: 0,
        right: 0,
        margin: '0 auto',
    },
    fabProgress: {
        color: colors.blue[500],
        position: 'absolute',
        zIndex: 1,
        top: -35,
        left: 0,
        right: 0,
        margin: '0 auto',
    },
    paper: {
        paddingBottom: 50,
        margin: 10,
        height: '100%',
    },
    container: {
        padding: 20,
    },
}));
export const Layout = ({ children }) => {
    const classes = useStyles();
    const theme = useTheme();
    const isDesktop = useMediaQuery(theme.breakpoints.up('lg'), { defaultMatches: true });
    const { updateModel, processor, updating } = useContext(Context);
    const label = processor.model.length ? `show ${processor.model.length} countries` : 'no data';
    const history = useHistory();
    return (React.createElement("div", { className: clsx({
            [classes.root]: true,
            [classes.shiftContent]: isDesktop,
        }) },
        React.createElement("main", { className: classes.content },
            React.createElement(Paper, { square: true, className: classes.paper },
                React.createElement(Container, { className: classes.container },
                    updating && (React.createElement("header", { className: classes.progress },
                        React.createElement(LinearProgress, null))),
                    children))),
        React.createElement(AppBar, { position: "fixed", color: "primary", className: classes.appBar },
            React.createElement(Toolbar, null,
                React.createElement(Typography, { className: classes.title, variant: "h6", noWrap: true }, "ts-covid19"),
                React.createElement(Fab, { color: "secondary", "aria-label": "refresh", className: classes.fabButton, onClick: updateModel, disabled: updating }, updating ? React.createElement(SyncDisabledIcon, null) : React.createElement(SyncIcon, null)),
                updating && React.createElement(CircularProgress, { size: 68, className: classes.fabProgress }),
                React.createElement("div", { className: classes.grow }),
                React.createElement(IconButton, { "aria-label": label, color: "inherit", onClick: () => {
                        history.push('/');
                    } },
                    React.createElement(Badge, { badgeContent: processor.model.length, color: "secondary", max: 999 },
                        React.createElement(WorldIcon, null))),
                React.createElement(IconButton, { "aria-label": "settings", color: "inherit", onClick: () => {
                        history.push('/about');
                    } },
                    React.createElement(SettingsIcon, null))))));
};
Layout.displayName = 'Layout';
Layout.propTypes = {
    children: PropTypes.element.isRequired,
};
Layout.defaultProps = {
    children: React.createElement("h1", null, Layout.displayName),
};
export default Layout;
//# sourceMappingURL=data:application/json;base64,