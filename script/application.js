import React, { useState } from 'react';
import { CssBaseline, ThemeProvider, createMuiTheme } from '@material-ui/core';
import { colors } from '@material-ui/core';
import { Context, Theme, webWorker } from 'context';
import { Routes } from 'routes';
import { ModelProcessor } from 'model';
const themeLight = createMuiTheme({
    palette: {
        primary: colors.blue,
    },
});
const themeDark = createMuiTheme({
    palette: {
        type: 'dark',
    },
});
const modelCacheId = 'jhu-csse-covid19';
const modelCachedValue = localStorage.getItem(modelCacheId);
const initialModel = modelCachedValue && modelCachedValue.length ? JSON.parse(modelCachedValue) : [];
const settingsCacheId = 'settings';
const settingsCachedValue = localStorage.getItem(settingsCacheId);
const settings = settingsCachedValue
    ? JSON.parse(settingsCachedValue)
    : {
        theme: Theme.LIGHT,
        densePadding: true,
    };
export const Application = () => {
    const [state, setState] = useState({
        theme: settings.theme,
        densePadding: settings.densePadding,
        toggleTheme: () => {
            switch (state.theme) {
                case Theme.DARK:
                    state.theme = Theme.LIGHT;
                    break;
                default:
                case Theme.LIGHT:
                    state.theme = Theme.DARK;
            }
            setState({ ...state });
            localStorage.setItem(settingsCacheId, JSON.stringify({ theme: state.theme, densePadding: state.densePadding }));
        },
        toggleDensePadding: () => {
            setState({ ...state, densePadding: !state.densePadding });
            localStorage.setItem(settingsCacheId, JSON.stringify({ theme: state.theme, densePadding: state.densePadding }));
        },
        processor: new ModelProcessor(initialModel),
        updating: false,
        updateModel: () => {
            const worker = webWorker();
            if (!state.updating) {
                worker.onmessage = (e) => {
                    state.processor = new ModelProcessor(e.data);
                    state.updating = false;
                    localStorage.setItem(modelCacheId, JSON.stringify(e.data));
                    setState({ ...state });
                };
                worker.postMessage(state.updating);
                state.processor = new ModelProcessor([]);
                state.updating = true;
                setState({ ...state });
            }
        },
    });
    return (React.createElement(Context.Provider, { value: state },
        React.createElement(ThemeProvider, { theme: state.theme === 'light' ? themeLight : themeDark },
            React.createElement(CssBaseline, null),
            React.createElement(Routes, null))));
};
Application.displayName = 'Application';
export default Application;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0L2FwcGxpY2F0aW9uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxFQUFxQixRQUFRLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDM0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDL0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxPQUFPLEVBQWUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNqRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFdkMsTUFBTSxVQUFVLEdBQUcsY0FBYyxDQUFDO0lBQ2hDLE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSTtLQUNyQjtDQUNGLENBQUMsQ0FBQztBQUVILE1BQU0sU0FBUyxHQUFHLGNBQWMsQ0FBQztJQUMvQixPQUFPLEVBQUU7UUFDUCxJQUFJLEVBQUUsTUFBTTtLQUNiO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsTUFBTSxZQUFZLEdBQUcsa0JBQWtCLENBQUM7QUFDeEMsTUFBTSxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzVELE1BQU0sWUFBWSxHQUFHLGdCQUFnQixJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFPckcsTUFBTSxlQUFlLEdBQUcsVUFBVSxDQUFDO0FBQ25DLE1BQU0sbUJBQW1CLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNsRSxNQUFNLFFBQVEsR0FBYSxtQkFBbUI7SUFDNUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUM7SUFDakMsQ0FBQyxDQUFDO1FBQ0UsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1FBQ2xCLFlBQVksRUFBRSxJQUFJO0tBQ25CLENBQUM7QUFFTixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQXNCLEdBQUcsRUFBRTtJQUNqRCxNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUNqQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUs7UUFDckIsWUFBWSxFQUFFLFFBQVEsQ0FBQyxZQUFZO1FBQ25DLFdBQVcsRUFBRSxHQUFHLEVBQUU7WUFDaEIsUUFBUSxLQUFLLENBQUMsS0FBSyxFQUFFO2dCQUNuQixLQUFLLEtBQUssQ0FBQyxJQUFJO29CQUNiLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztvQkFDMUIsTUFBTTtnQkFDUixRQUFRO2dCQUNSLEtBQUssS0FBSyxDQUFDLEtBQUs7b0JBQ2QsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO2FBQzVCO1lBQ0QsUUFBUSxDQUFDLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZCLFlBQVksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsSCxDQUFDO1FBQ0Qsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO1lBQ3ZCLFFBQVEsQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFLFlBQVksRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1lBQzFELFlBQVksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsSCxDQUFDO1FBQ0QsU0FBUyxFQUFFLElBQUksY0FBYyxDQUFDLFlBQVksQ0FBQztRQUMzQyxRQUFRLEVBQUUsS0FBSztRQUNmLFdBQVcsRUFBRSxHQUFHLEVBQUU7WUFDaEIsTUFBTSxNQUFNLEdBQUcsU0FBUyxFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQ25CLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRTtvQkFDdkIsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQzdDLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO29CQUN2QixZQUFZLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUMzRCxRQUFRLENBQUMsRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBQ3pCLENBQUMsQ0FBQztnQkFDRixNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDbkMsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDekMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ3RCLFFBQVEsQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUN4QjtRQUNILENBQUM7S0FDYSxDQUFDLENBQUM7SUFFbEIsT0FBTyxDQUNMLG9CQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUMsS0FBSyxFQUFFLEtBQUs7UUFDNUIsb0JBQUMsYUFBYSxJQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTO1lBQ3BFLG9CQUFDLFdBQVcsT0FBRztZQUNkLG9CQUFDLE1BQU0sT0FBRyxDQUNHLENBQ0MsQ0FDcEIsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLFdBQVcsQ0FBQyxXQUFXLEdBQUcsYUFBYSxDQUFDO0FBRXhDLGVBQWUsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENzc0Jhc2VsaW5lLCBUaGVtZVByb3ZpZGVyLCBjcmVhdGVNdWlUaGVtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcblxuaW1wb3J0IHsgQ29udGV4dCwgQ29udGV4dFR5cGUsIFRoZW1lLCB3ZWJXb3JrZXIgfSBmcm9tICdjb250ZXh0JztcbmltcG9ydCB7IFJvdXRlcyB9IGZyb20gJ3JvdXRlcyc7XG5pbXBvcnQgeyBNb2RlbFByb2Nlc3NvciB9IGZyb20gJ21vZGVsJztcblxuY29uc3QgdGhlbWVMaWdodCA9IGNyZWF0ZU11aVRoZW1lKHtcbiAgcGFsZXR0ZToge1xuICAgIHByaW1hcnk6IGNvbG9ycy5ibHVlLFxuICB9LFxufSk7XG5cbmNvbnN0IHRoZW1lRGFyayA9IGNyZWF0ZU11aVRoZW1lKHtcbiAgcGFsZXR0ZToge1xuICAgIHR5cGU6ICdkYXJrJyxcbiAgfSxcbn0pO1xuXG5jb25zdCBtb2RlbENhY2hlSWQgPSAnamh1LWNzc2UtY292aWQxOSc7XG5jb25zdCBtb2RlbENhY2hlZFZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0obW9kZWxDYWNoZUlkKTtcbmNvbnN0IGluaXRpYWxNb2RlbCA9IG1vZGVsQ2FjaGVkVmFsdWUgJiYgbW9kZWxDYWNoZWRWYWx1ZS5sZW5ndGggPyBKU09OLnBhcnNlKG1vZGVsQ2FjaGVkVmFsdWUpIDogW107XG5cbnR5cGUgU2V0dGluZ3MgPSB7XG4gIHRoZW1lOiBUaGVtZTtcbiAgZGVuc2VQYWRkaW5nOiBib29sZWFuO1xufTtcblxuY29uc3Qgc2V0dGluZ3NDYWNoZUlkID0gJ3NldHRpbmdzJztcbmNvbnN0IHNldHRpbmdzQ2FjaGVkVmFsdWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShzZXR0aW5nc0NhY2hlSWQpO1xuY29uc3Qgc2V0dGluZ3M6IFNldHRpbmdzID0gc2V0dGluZ3NDYWNoZWRWYWx1ZVxuICA/IEpTT04ucGFyc2Uoc2V0dGluZ3NDYWNoZWRWYWx1ZSlcbiAgOiB7XG4gICAgICB0aGVtZTogVGhlbWUuTElHSFQsXG4gICAgICBkZW5zZVBhZGRpbmc6IHRydWUsXG4gICAgfTtcblxuZXhwb3J0IGNvbnN0IEFwcGxpY2F0aW9uOiBGdW5jdGlvbkNvbXBvbmVudCA9ICgpID0+IHtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZSh7XG4gICAgdGhlbWU6IHNldHRpbmdzLnRoZW1lLFxuICAgIGRlbnNlUGFkZGluZzogc2V0dGluZ3MuZGVuc2VQYWRkaW5nLFxuICAgIHRvZ2dsZVRoZW1lOiAoKSA9PiB7XG4gICAgICBzd2l0Y2ggKHN0YXRlLnRoZW1lKSB7XG4gICAgICAgIGNhc2UgVGhlbWUuREFSSzpcbiAgICAgICAgICBzdGF0ZS50aGVtZSA9IFRoZW1lLkxJR0hUO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICBjYXNlIFRoZW1lLkxJR0hUOlxuICAgICAgICAgIHN0YXRlLnRoZW1lID0gVGhlbWUuREFSSztcbiAgICAgIH1cbiAgICAgIHNldFN0YXRlKHsgLi4uc3RhdGUgfSk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShzZXR0aW5nc0NhY2hlSWQsIEpTT04uc3RyaW5naWZ5KHsgdGhlbWU6IHN0YXRlLnRoZW1lLCBkZW5zZVBhZGRpbmc6IHN0YXRlLmRlbnNlUGFkZGluZyB9KSk7XG4gICAgfSxcbiAgICB0b2dnbGVEZW5zZVBhZGRpbmc6ICgpID0+IHtcbiAgICAgIHNldFN0YXRlKHsgLi4uc3RhdGUsIGRlbnNlUGFkZGluZzogIXN0YXRlLmRlbnNlUGFkZGluZyB9KTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHNldHRpbmdzQ2FjaGVJZCwgSlNPTi5zdHJpbmdpZnkoeyB0aGVtZTogc3RhdGUudGhlbWUsIGRlbnNlUGFkZGluZzogc3RhdGUuZGVuc2VQYWRkaW5nIH0pKTtcbiAgICB9LFxuICAgIHByb2Nlc3NvcjogbmV3IE1vZGVsUHJvY2Vzc29yKGluaXRpYWxNb2RlbCksXG4gICAgdXBkYXRpbmc6IGZhbHNlLFxuICAgIHVwZGF0ZU1vZGVsOiAoKSA9PiB7XG4gICAgICBjb25zdCB3b3JrZXIgPSB3ZWJXb3JrZXIoKTtcbiAgICAgIGlmICghc3RhdGUudXBkYXRpbmcpIHtcbiAgICAgICAgd29ya2VyLm9ubWVzc2FnZSA9IChlKSA9PiB7XG4gICAgICAgICAgc3RhdGUucHJvY2Vzc29yID0gbmV3IE1vZGVsUHJvY2Vzc29yKGUuZGF0YSk7XG4gICAgICAgICAgc3RhdGUudXBkYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShtb2RlbENhY2hlSWQsIEpTT04uc3RyaW5naWZ5KGUuZGF0YSkpO1xuICAgICAgICAgIHNldFN0YXRlKHsgLi4uc3RhdGUgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZShzdGF0ZS51cGRhdGluZyk7XG4gICAgICAgIHN0YXRlLnByb2Nlc3NvciA9IG5ldyBNb2RlbFByb2Nlc3NvcihbXSk7XG4gICAgICAgIHN0YXRlLnVwZGF0aW5nID0gdHJ1ZTtcbiAgICAgICAgc2V0U3RhdGUoeyAuLi5zdGF0ZSB9KTtcbiAgICAgIH1cbiAgICB9LFxuICB9IGFzIENvbnRleHRUeXBlKTtcblxuICByZXR1cm4gKFxuICAgIDxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtzdGF0ZX0+XG4gICAgICA8VGhlbWVQcm92aWRlciB0aGVtZT17c3RhdGUudGhlbWUgPT09ICdsaWdodCcgPyB0aGVtZUxpZ2h0IDogdGhlbWVEYXJrfT5cbiAgICAgICAgPENzc0Jhc2VsaW5lIC8+XG4gICAgICAgIHs8Um91dGVzIC8+fVxuICAgICAgPC9UaGVtZVByb3ZpZGVyPlxuICAgIDwvQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cbkFwcGxpY2F0aW9uLmRpc3BsYXlOYW1lID0gJ0FwcGxpY2F0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgQXBwbGljYXRpb247XG4iXX0=