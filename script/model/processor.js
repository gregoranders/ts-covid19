import PropTypes from 'prop-types';
import Population from "./population.js";
export var Sort;
(function (Sort) {
    Sort[Sort["COUNTRY_ASC"] = 0] = "COUNTRY_ASC";
    Sort[Sort["COUNTRY_DESC"] = 1] = "COUNTRY_DESC";
    Sort[Sort["CONFIRMED_ASC"] = 2] = "CONFIRMED_ASC";
    Sort[Sort["CONFIRMED_DESC"] = 3] = "CONFIRMED_DESC";
    Sort[Sort["DEATHS_ASC"] = 4] = "DEATHS_ASC";
    Sort[Sort["DEATHS_DESC"] = 5] = "DEATHS_DESC";
    Sort[Sort["RECOVERED_ASC"] = 6] = "RECOVERED_ASC";
    Sort[Sort["RECOVERED_DESC"] = 7] = "RECOVERED_DESC";
    Sort[Sort["ACTIVE_ASC"] = 8] = "ACTIVE_ASC";
    Sort[Sort["ACTIVE_DESC"] = 9] = "ACTIVE_DESC";
    Sort[Sort["POPULATION_ASC"] = 10] = "POPULATION_ASC";
    Sort[Sort["POPULATION_DESC"] = 11] = "POPULATION_DESC";
    Sort[Sort["CONFIRMED_NORMALIZED_ASC"] = 12] = "CONFIRMED_NORMALIZED_ASC";
    Sort[Sort["CONFIRMED_NORMALIZED_DESC"] = 13] = "CONFIRMED_NORMALIZED_DESC";
    Sort[Sort["DEATHS_NORMALIZED_ASC"] = 14] = "DEATHS_NORMALIZED_ASC";
    Sort[Sort["DEATHS_NORMALIZED_DESC"] = 15] = "DEATHS_NORMALIZED_DESC";
    Sort[Sort["RECOVERED_NORMALIZED_ASC"] = 16] = "RECOVERED_NORMALIZED_ASC";
    Sort[Sort["RECOVERED_NORMALIZED_DESC"] = 17] = "RECOVERED_NORMALIZED_DESC";
})(Sort || (Sort = {}));
const sortByNameAsc = (a, b) => {
    const val = a.country.localeCompare(b.country);
    if (val === 0) {
        return a.state.localeCompare(b.state);
    }
    return val;
};
const sortByNameDesc = (a, b) => {
    const val = b.country.localeCompare(a.country);
    if (val === 0) {
        return b.state.localeCompare(a.state);
    }
    return val;
};
const sortByFieldAsc = (a, b, field) => {
    return a.values[a.values.length - 1][field] - b.values[b.values.length - 1][field];
};
const sortByFieldDesc = (a, b, field) => {
    return b.values[b.values.length - 1][field] - a.values[a.values.length - 1][field];
};
const sortByFieldNormalizedAsc = (a, b, field) => {
    const valueA = a.values[a.values.length - 1][field];
    const valueB = b.values[b.values.length - 1][field];
    const factorA = a.population / 100000;
    const factorB = b.population / 100000;
    return Math.round(valueA / factorA) - Math.round(valueB / factorB);
};
const sortByFieldNormalizedDesc = (a, b, field) => {
    const valueA = a.values[a.values.length - 1][field];
    const valueB = b.values[b.values.length - 1][field];
    const factorA = a.population / 100000;
    const factorB = b.population / 100000;
    return Math.round(valueB / factorB) - Math.round(valueA / factorA);
};
const sortByConfirmedAsc = (a, b) => {
    return sortByFieldAsc(a, b, 'confirmed');
};
const sortByConfirmedDesc = (a, b) => {
    return sortByFieldDesc(a, b, 'confirmed');
};
const sortByConfirmedNormalizedAsc = (a, b) => {
    return sortByFieldNormalizedAsc(a, b, 'confirmed');
};
const sortByConfirmedNormalizedDesc = (a, b) => {
    return sortByFieldNormalizedDesc(a, b, 'confirmed');
};
const sortByDeathsAsc = (a, b) => {
    return sortByFieldAsc(a, b, 'deaths');
};
const sortByDeathsDesc = (a, b) => {
    return sortByFieldDesc(a, b, 'deaths');
};
const sortByDeathsNormalizedAsc = (a, b) => {
    return sortByFieldNormalizedAsc(a, b, 'deaths');
};
const sortByDeathsNormalizedDesc = (a, b) => {
    return sortByFieldNormalizedDesc(a, b, 'deaths');
};
const sortByRecoveredAsc = (a, b) => {
    return sortByFieldAsc(a, b, 'recovered');
};
const sortByRecoveredDesc = (a, b) => {
    return sortByFieldDesc(a, b, 'recovered');
};
const sortByRecoveredNormalizedAsc = (a, b) => {
    return sortByFieldNormalizedAsc(a, b, 'recovered');
};
const sortByRecoveredNormalizedDesc = (a, b) => {
    return sortByFieldNormalizedDesc(a, b, 'recovered');
};
const sortByActiveAsc = (a, b) => {
    const latestA = a.values[a.values.length - 1];
    const latestB = b.values[b.values.length - 1];
    const activeA = latestA.confirmed - latestA.deaths - latestA.recovered;
    const activeB = latestB.confirmed - latestB.deaths - latestB.recovered;
    return activeA - activeB;
};
const sortByActiveDesc = (a, b) => {
    const latestA = a.values[a.values.length - 1];
    const latestB = b.values[b.values.length - 1];
    const activeA = latestA.confirmed - latestA.deaths - latestA.recovered;
    const activeB = latestB.confirmed - latestB.deaths - latestB.recovered;
    return activeB - activeA;
};
const sortByPopulationAsc = (a, b) => {
    return a.population - b.population;
};
const sortByPopulationDesc = (a, b) => {
    return b.population - a.population;
};
export class ModelProcessor {
    constructor(_model) {
        this._model = [];
        this._model = _model.map((model) => {
            const population = model.population ? model.population : this.population(model);
            return {
                ...model,
                population,
                values: model.values.map((value) => {
                    return {
                        ...value,
                    };
                }),
            };
        });
    }
    get model() {
        return this._model;
    }
    name(model) {
        if (model.state && model.state.length) {
            return `${model.country} - ${model.state}`;
        }
        return model.country;
    }
    url(model) {
        if (model.state && model.state.length) {
            return `${model.country}/${model.state}`;
        }
        return model.country;
    }
    find(country, state) {
        return this._model.find((model) => {
            if (state && state.length) {
                return model.country === country && model.state === state;
            }
            else {
                return model.country === country;
            }
        });
    }
    sort(sortBy) {
        switch (sortBy) {
            case Sort.COUNTRY_ASC:
                return this._sort(sortByNameAsc);
            case Sort.COUNTRY_DESC:
                return this._sort(sortByNameDesc);
            case Sort.CONFIRMED_ASC:
                return this._sort(sortByConfirmedAsc);
            case Sort.CONFIRMED_DESC:
                return this._sort(sortByConfirmedDesc);
            case Sort.CONFIRMED_NORMALIZED_ASC:
                return this._sort(sortByConfirmedNormalizedAsc);
            case Sort.CONFIRMED_NORMALIZED_DESC:
                return this._sort(sortByConfirmedNormalizedDesc);
            case Sort.DEATHS_ASC:
                return this._sort(sortByDeathsAsc);
            case Sort.DEATHS_DESC:
                return this._sort(sortByDeathsDesc);
            case Sort.DEATHS_NORMALIZED_ASC:
                return this._sort(sortByDeathsNormalizedAsc);
            case Sort.DEATHS_NORMALIZED_DESC:
                return this._sort(sortByDeathsNormalizedDesc);
            case Sort.RECOVERED_ASC:
                return this._sort(sortByRecoveredAsc);
            case Sort.RECOVERED_DESC:
                return this._sort(sortByRecoveredDesc);
            case Sort.RECOVERED_NORMALIZED_ASC:
                return this._sort(sortByRecoveredNormalizedAsc);
            case Sort.RECOVERED_NORMALIZED_DESC:
                return this._sort(sortByRecoveredNormalizedDesc);
            case Sort.ACTIVE_ASC:
                return this._sort(sortByActiveAsc);
            case Sort.ACTIVE_DESC:
                return this._sort(sortByActiveDesc);
            case Sort.POPULATION_ASC:
                return this._sort(sortByPopulationAsc);
            case Sort.POPULATION_DESC:
                return this._sort(sortByPopulationDesc);
            default:
                return this._sort(sortByNameAsc);
        }
    }
    get aggregated() {
        return this.model
            .map((model) => model.values)
            .reduce((prev, current) => {
            return current.map((temp, index) => {
                if (temp.timestamp !== prev[index].timestamp)
                    throw new Error();
                return {
                    confirmed: temp.confirmed + prev[index].confirmed,
                    deaths: temp.deaths + prev[index].deaths,
                    recovered: temp.recovered + prev[index].recovered,
                    timestamp: temp.timestamp,
                };
            });
        });
    }
    utc(date) {
        return date.toUTCString().replace(/\s00:00:00.*/, '');
    }
    population(model) {
        const found = Population.find((population) => {
            if (population.country === model.country) {
                if (model.state === population.state) {
                    return true;
                }
            }
            return false;
        });
        if (found) {
            return found.count;
        }
        console.error(this.name(model));
        return 0;
    }
    ratio(a, b) {
        if (!b) {
            return a;
        }
        return (a / b) * 100.0;
    }
    get latestUpdateDate() {
        if (this._model && this._model.length) {
            return this._model[0].values[this._model[0].values.length - 1].timestamp;
        }
        return null;
    }
    _sort(sortFn) {
        return this._model.sort(sortFn);
    }
}
export const ModelProcessorPropTypes = PropTypes.instanceOf(ModelProcessor).isRequired;
//# sourceMappingURL=data:application/json;base64,