var gc;!function(e){e.cacheFiles=["","favicon.ico","favicon/android-chrome-144x144.png","favicon/android-chrome-192x192.png","favicon/android-chrome-256x256.png","favicon/android-chrome-36x36.png","favicon/android-chrome-384x384.png","favicon/android-chrome-48x48.png","favicon/android-chrome-512x512.png","favicon/android-chrome-72x72.png","favicon/android-chrome-96x96.png","favicon/apple-touch-icon-1024x1024.png","favicon/apple-touch-icon-114x114.png","favicon/apple-touch-icon-120x120.png","favicon/apple-touch-icon-144x144.png","favicon/apple-touch-icon-152x152.png","favicon/apple-touch-icon-167x167.png","favicon/apple-touch-icon-180x180.png","favicon/apple-touch-icon-57x57.png","favicon/apple-touch-icon-60x60.png","favicon/apple-touch-icon-72x72.png","favicon/apple-touch-icon-76x76.png","favicon/apple-touch-icon-precomposed.png","favicon/apple-touch-icon.png","favicon/favicon-16x16.png","favicon/favicon-32x32.png","favicon/favicon-48x48.png","importmap.json","index.html","manifest.json","robots.txt","script/application.js","script/components/layout/index.js","script/components/molecules/plot/index.js","script/components/organisms/countries/index.js","script/components/organisms/series/index.js","script/components/pages/country/index.js","script/components/pages/world/index.js","script/context.js","script/index.js","script/loading.js","script/registerServiceWorker.js","script/routes.js","script/states/model/collector.js","script/states/model/index.js","script/states/model/model.js","script/states/model/processor.js","script/states/model/sorter.js","serviceWorker.js","styles.css","vendor/@fortawesome/fontawesome-svg-core.js","vendor/@fortawesome/free-brands-svg-icons.js","vendor/@fortawesome/free-regular-svg-icons.js","vendor/@fortawesome/free-solid-svg-icons.js","vendor/clsx.js","vendor/d3-array.js","vendor/d3-color.js","vendor/d3-format.js","vendor/d3-interpolate.js","vendor/d3-path.js","vendor/d3-scale.js","vendor/d3-shape.js","vendor/d3-time-format.js","vendor/d3-time.js","vendor/es-module-shims.js","vendor/idb.js","vendor/object-assign.js","vendor/prop-types.js","vendor/react-dom.js","vendor/react-is.js","vendor/react-router-dom.js","vendor/react-router.js","vendor/react-smooth.js","vendor/react-transition-group.js","vendor/react-virtualized.js","vendor/react.js","vendor/recharts-scale.js","vendor/recharts.js","vendor/recoil.js","vendor/scheduler.js"]}(gc||(gc={})),function(e){const t={undefined:!1,fieldSeparator:",",lineSeparator:"\n",quote:'"'},s=(e,t)=>{if(!t.undefined||e.length)return e},o=(e,t,s)=>{t.push(e),s.field++,s.fieldOffset=-1,s.appendField=!1},r=(e,t,s)=>{t.push(e),s.field=0,s.line++,s.lineOffset=-1,s.appendRow=!1},a=(e,a=t)=>new Promise(n=>{((e,a=t)=>{const n=Object.assign({},t,a),i={field:0,fieldOffset:0,line:0,lineOffset:0,quoted:!1,appendCell:!1,appendField:!1,appendRow:!1};return new Promise((t,a)=>{if(e.length){const c=[];let d=[],l="";for(let t=0;t<e.length;t++)i.appendCell=!0,e[t]===n.quote?t&&"\\"!==e[t-1]?(!l.length||i.quoted?i.quoted=!i.quoted:a(Error(`Invalid CSV text at offset ${i.line}:${i.lineOffset}`)),i.appendCell=!1):l=l.substr(0,l.length-1):e[t]===n.fieldSeparator?i.quoted||(i.appendCell=!1,i.appendField=!0):e[t]===n.lineSeparator&&(i.quoted||(i.appendCell=!1,i.appendField=!0,i.appendRow=!0)),i.appendCell&&(l+=e[t]),i.appendField&&(o(s(l,n),d,i),l=""),i.appendRow&&(r(d,c,i),d=[]),i.lineOffset++,i.fieldOffset++;d.length&&(o(s(l,n),d,i),r(d,c,i)),t(c)}else a(Error("Empty CSV text"))})})(e,a).then(e=>{const t=e[0].filter(e=>"string"==typeof e);n(e.filter((e,t)=>t>0).map(e=>{const s={};return t.forEach((t,o)=>{s[t]=e[o]}),s}))})});class n{map(e){return e.map(e=>this._map(e)).sort((e,t)=>{const s=e.country.localeCompare(t.country);return 0===s?e.state.localeCompare(t.state):s})}_map(e){const t={values:[]};return Object.keys(e).forEach(s=>{if(s.match(/State/))t.state=e[s];else if(s.match(/Country/))t.country=e[s].replace(/\*/,"");else if(s.match(/Lat/))t.lat=parseFloat(e[s]);else if(s.match(/Long/))t.lon=parseFloat(e[s]);else{const o=parseInt(e[s],10),r=new Date(s),a=Date.UTC(r.getFullYear(),r.getMonth(),r.getDate());t.values.push({timestamp:a,value:o})}}),t.values.sort((e,t)=>e.timestamp-t.timestamp),Object.freeze(t)}}class i{map(e){return e.map(e=>this._map(e)).sort((e,t)=>{const s=e.country.localeCompare(t.country);return 0===s?e.state.localeCompare(t.state):s})}_map(e){const t={};return Object.keys(e).forEach(s=>{s.match(/State/)?t.state=e[s]:s.match(/Country/)?t.country=e[s].replace(/\*/,""):s.match(/Lat/)?t.lat=parseFloat(e[s]):s.match(/Long/)?t.lon=parseFloat(e[s]):s.match(/Population/)?t.population=parseInt(e[s]):s.match(/UID/)?t.uid=parseInt(e[s]):s.match(/iso2/)?t.iso2=e[s]:s.match(/iso3/)?t.iso3=e[s]:s.match(/code3/)?t.code3=parseInt(e[s]):s.match(/FIPS/)?t.fips=parseInt(e[s]):s.match(/Admin2/)&&(t.admin2=e[s])}),Object.freeze(t)}}let c;!function(e){e.CONFIRMED="confirmed",e.DEATHS="deaths",e.RECOVERED="recovered",e.LOOKUP="lookup"}(c||(c={}));e.ModelCollector=class{constructor(e=new n,t=new i){this._modelMapper=e,this._lookupMapper=t}async collect(){const e=await this._fetchLookup(),t=await this._fetchModel(c.CONFIRMED),s=await this._fetchModel(c.DEATHS),o=await this._fetchModel(c.RECOVERED);return this.merge(t,s,o,e)}findSeries(e,t){const s=t.find(t=>t.timestamp===e);return s?s.value:0}async merge(e,t,s,o){return new Promise(r=>{r(e.filter(e=>"Canada"!==e.country||"Recovered"!==e.state).map(e=>{const r=o.find(t=>{let s=t.country.localeCompare(e.country);return 0===s&&(s=t.state.localeCompare(e.state)),0===s}),a=t.find(t=>t.country===e.country&&t.state===e.state),n=s.find(t=>t.country===e.country&&t.state===e.state),i=e.values.map(e=>Object.freeze({confirmed:e.value,deaths:this.findSeries(e.timestamp,a?a.values:[]),recovered:this.findSeries(e.timestamp,n?n.values:[]),timestamp:e.timestamp}));return Object.freeze({country:e.country,lat:e.lat,lon:e.lon,state:e.state,population:r&&r.population||0,values:Object.freeze(i)})}))})}async _fetchModel(e){return this._fetch(e).then(e=>a(e)).then(e=>this._modelMapper.map(e))}async _fetchLookup(){return this._fetch(c.LOOKUP).then(e=>a(e)).then(e=>this._lookupMapper.map(e))}async _fetch(e){const t=new Request(this._fetchUrl(e),{headers:this._fetchHeaders(),method:"GET"});return fetch(t,{credentials:"same-origin"}).then(e=>e.text())}_fetchHeaders(){return{"Accept-Encoding":"gzip, deflate, br"}}_fetchUrl(e){const t="https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/";return e===c.LOOKUP?t+"UID_ISO_FIPS_LookUp_Table.csv":`https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_${e}_global.csv`}};e.ModelProcessor=class{constructor(e){this._model=[],e&&e.length&&(this._model=this.process(e))}get model(){return this._model}process(e){return e.map(e=>{const t=e.population?e.population/1e5:1,s={country:e.country,population:e.population};return e.state&&e.state.length&&(s.state=e.state),s.values=e.values.map((e,s,o)=>{const r={5:this.avrg(5,s,o),7:this.avrg(7,s,o),14:this.avrg(14,s,o),21:this.avrg(21,s,o),28:this.avrg(28,s,o)},a=this.diff(e,s,o),n={confirmed:e.confirmed,dead:e.deaths,recovered:e.recovered,active:this.active(e)};return{...n,diff:a,avrg:r,ratio:{...this.ratio(n,t),diff:this.ratio(a,t),avrg:{5:this.ratio(r[5],t),7:this.ratio(r[7],t),14:this.ratio(r[14],t),21:this.ratio(r[21],t),28:this.ratio(r[28],t)}},timestamp:e.timestamp}}),s})}diff(e,t,s){return t?{confirmed:e.confirmed-s[t-1].confirmed,dead:e.deaths-s[t-1].deaths,recovered:e.recovered-s[t-1].recovered,active:this.active(e)-this.active(s[t-1])}:{confirmed:0,dead:0,recovered:0,active:0}}avrg(e,t,s){if(t){const o={confirmed:0,dead:0,recovered:0,active:0};let r=0;for(let a=t;a>t-e&&a>0;a--){const e=this.diff(s[a],a,s);o.confirmed+=e.confirmed,o.dead+=e.dead,o.recovered+=e.recovered,o.active+=e.active,r++}return r?{confirmed:o.confirmed/r,dead:o.dead/r,recovered:o.recovered/r,active:o.active/r}:o}return{confirmed:s[t].confirmed,dead:s[t].deaths,recovered:s[t].recovered,active:this.active(s[t])}}active(e){return e.confirmed-e.deaths-e.recovered}ratio(e,t){return{confirmed:e.confirmed/t,dead:e.dead/t,recovered:e.recovered/t,active:e.active/t}}}}(gc||(gc={})),function(e){const t=new URL(location.toString()).searchParams.get("base")||"/";new((()=>{class t{constructor(e=self,t="/",s=[]){this.service=e,this.base=t,this.cacheUrls=s,e.customServiceWorker=this}register(){if(!this.service)throw new Error("Invalid service [ServiceWorkerGlobalScope]");this.service.onsync=this.onSync.bind(this),this.service.onactivate=this.onActivate.bind(this),this.service.onfetch=this.onFetch.bind(this),this.service.oninstall=this.onInstall.bind(this),this.service.onmessage=this.onMessage.bind(this)}onInstall(e){e.waitUntil(new Promise(e=>{this.initializeCache().then(()=>{e(this.service.skipWaiting())})}))}async onActivate(e){e.waitUntil(new Promise(e=>{this.flushCache().then(()=>{e(this.service.skipWaiting())})}))}onFetch(e){"only-if-cached"===e.request.cache&&"same-origin"!==e.request.mode||e.respondWith(caches.match(e.request).then(t=>t||this.service.fetch(e.request,{credentials:"same-origin"}).then(t=>{if(!t||200!==t.status||"basic"!==t.type)return t;const s=t.clone();return caches.open(this.cacheId("fetch")).then(t=>{t.put(e.request,s)}).catch(e=>{throw e}),t})))}onMessage(e){if(e&&e.data&&e.data.type)switch(e.data.type){case"GET_VERSION":e.ports[0].postMessage(t.version);break;case"CONTENT_CACHED":this.service.clients.matchAll().then(e=>{e.forEach(e=>{e.postMessage("CONTENT_CACHED")})});break;case"CONTENT_UPDATED":this.service.clients.matchAll().then(e=>{e.forEach(e=>{e.postMessage("CONTENT_UPDATED")})});break;case"CLIENTS_CLAIM":this.service.clients.claim();break;case"SKIP_WAITING":this.service.skipWaiting();break;case"REDUNDANT":this.log("REDUNDANT")}else this.log("message raw",e)}async onSync(t){switch(t.tag){case"UPDATE_MODEL":const t=new e.ModelCollector,s=await t.collect(),o=new e.ModelProcessor(s).model;this.service.clients.matchAll().then(e=>{e.forEach(e=>{e.postMessage(o)})})}}log(...e){const s=["background: #000080","border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.em"];console.log(`%c${t.id}-${t.version}`,s.join(";"),e)}cacheId(e){return`${e}-${t.version}`}initializeCache(){return new Promise((e,t)=>{caches.open(this.cacheId("install")).then(e=>e.addAll(this.cacheUrls.map(e=>`${this.base}${e}`))).then(e).catch(t)})}flushCache(){const e=[this.cacheId("install"),this.cacheId("fetch"),this.cacheId("data")];return new Promise((t,s)=>{caches.keys().then(s=>{t(Promise.all(s.map(t=>-1===e.indexOf(t)?caches.delete(t):Promise.resolve(!0))))}).catch(s)})}}return t.id="ServiceWorker",t.version="0.0.1",t})())(self,t,e.cacheFiles).register()}(gc||(gc={}));